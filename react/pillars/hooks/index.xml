<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React Hooks on Orange Academy</title>
    <link>/react/pillars/hooks/</link>
    <description>Recent content in React Hooks on Orange Academy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="./react/pillars/hooks/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Intro to Hooks</title>
      <link>/react/pillars/hooks/intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/react/pillars/hooks/intro/</guid>
      <description>Concepts  Introduce React hooks and how they simplify your React code Understand the advantages of using hooks over writing JavaScript class components  What Are Hooks Hooks were added to React in v16.</description>
    </item>
    
    <item>
      <title>The useState Hook</title>
      <link>/react/pillars/hooks/usestate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/react/pillars/hooks/usestate/</guid>
      <description>Concepts and Skills  Understand how useState allows for local state management in a function component.</description>
    </item>
    
    <item>
      <title>The useEffect Hook</title>
      <link>/react/pillars/hooks/useeffect/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/react/pillars/hooks/useeffect/</guid>
      <description>Concepts and Skills  Understand how useEffect replaces componentDidMount, componentDidUpdate, and componentWillUnmount. Apply the useEffect hook to manage side effects in a React component.</description>
    </item>
    
    <item>
      <title>The useContext Hook</title>
      <link>/react/pillars/hooks/usecontext/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/react/pillars/hooks/usecontext/</guid>
      <description>Concepts and Skills  Understand how the useContext hook eliminates the need for nested component wrappers when consuming a Context value.</description>
    </item>
    
    <item>
      <title>The useRef Hook</title>
      <link>/react/pillars/hooks/useref/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/react/pillars/hooks/useref/</guid>
      <description>Concepts and Skills  Learn how useRef can hold onto mutable objects within a React component Learn how useRef is sometimes necessary when using 3rd party libraries that are not written for React  Introduction The useRef hook returns a mutable object whose .</description>
    </item>
    
    <item>
      <title>The useReducer Hook</title>
      <link>/react/pillars/hooks/usereducer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/react/pillars/hooks/usereducer/</guid>
      <description>Concepts and Skills  Understand how useReducer allows for local state management in a function component.</description>
    </item>
    
    <item>
      <title>Custom Hooks</title>
      <link>/react/pillars/hooks/customhooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/react/pillars/hooks/customhooks/</guid>
      <description>Concepts and Skills  Understand how to write custom hooks that wrap one or more built-in hooks.</description>
    </item>
    
  </channel>
</rss>